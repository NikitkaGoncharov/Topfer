from django import template
from django.utils import timezone
from django.db.models import Sum
from finance.models import Transaction, Budget, Account

register = template.Library()


# 1. –ü—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω–Ω—ã–π —Ç–µ–≥
@register.simple_tag
def current_time(format_string='%d.%m.%Y %H:%M'):
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–≥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {% current_time "%d.%m.%Y" %}
    """
    return timezone.now().strftime(format_string)


@register.simple_tag
def multiply(a, b):
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–≥ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {% multiply 5 10 %}
    """
    return float(a) * float(b)


# 2. –®–∞–±–ª–æ–Ω–Ω—ã–π —Ç–µ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
@register.simple_tag(takes_context=True)
def user_balance(context):
    """
    –¢–µ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {% user_balance %}
    """
    user = context.get('user')
    if user and user.is_authenticated:
        total = Account.objects.filter(user=user).aggregate(
            total=Sum('balance')
        )['total'] or 0
        return f"{total:.2f}"
    return "0.00"


@register.simple_tag(takes_context=True)
def user_transactions_count(context, transaction_type=None):
    """
    –¢–µ–≥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {% user_transactions_count "income" %}
    """
    user = context.get('user')
    if user and user.is_authenticated:
        queryset = Transaction.objects.filter(account__user=user)
        if transaction_type:
            queryset = queryset.filter(transaction_type=transaction_type)
        return queryset.count()
    return 0


# 3. –®–∞–±–ª–æ–Ω–Ω—ã–π —Ç–µ–≥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –Ω–∞–±–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ (inclusion tag)
@register.inclusion_tag('finance/widgets/recent_transactions.html', takes_context=True)
def show_recent_transactions(context, limit=5):
    """
    Inclusion tag, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –Ω–∞–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {% show_recent_transactions 10 %}
    """
    user = context.get('user')
    transactions = []

    if user and user.is_authenticated:
        transactions = Transaction.objects.filter(
            account__user=user
        ).select_related(
            'account', 'category', 'account__currency'
        ).order_by('-transaction_date')[:limit]

    return {
        'transactions': transactions,
        'user': user
    }


@register.inclusion_tag('finance/widgets/active_budgets.html', takes_context=True)
def show_active_budgets(context, limit=5):
    """
    Inclusion tag, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {% show_active_budgets 3 %}
    """
    user = context.get('user')
    budgets = []

    if user and user.is_authenticated:
        from django.db.models import Q
        today = timezone.now().date()
        budgets = Budget.objects.filter(
            user=user
        ).filter(
            Q(end_date__isnull=True) | Q(end_date__gte=today),
            start_date__lte=today
        ).select_related('category')[:limit]

    return {
        'budgets': budgets,
        'user': user
    }


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
@register.filter
def currency_symbol(value):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {{ amount|currency_symbol }}
    """
    return f"{value} ‚ÇΩ"


@register.filter
def transaction_icon(transaction_type):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {{ transaction.transaction_type|transaction_icon }}
    """
    icons = {
        'income': 'üìà',
        'expense': 'üìâ',
        'transfer': 'üîÑ'
    }
    return icons.get(transaction_type, 'üí∞')
